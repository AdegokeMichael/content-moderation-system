version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: content_moderation_db
    environment:
      POSTGRES_DB: ${DB_NAME:-content_moderation}
      POSTGRES_USER: ${DB_USER:-moderator}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-moderator} -d ${DB_NAME:-content_moderation}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - moderation_network
    restart: unless-stopped

  # Content Moderation API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: content_moderation_api
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-content_moderation}
      DB_USER: ${DB_USER:-moderator}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      
      # Social Media Credentials (optional)
      FACEBOOK_TOKEN: ${FACEBOOK_TOKEN:-}
      TWITTER_API_KEY: ${TWITTER_API_KEY:-}
      TWITTER_API_SECRET: ${TWITTER_API_SECRET:-}
      TWITTER_ACCESS_TOKEN: ${TWITTER_ACCESS_TOKEN:-}
      TWITTER_ACCESS_SECRET: ${TWITTER_ACCESS_SECRET:-}
      
      # Application Settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${WORKERS:-2}
      
      # Python Settings
      PYTHONUNBUFFERED: 1
      TRANSFORMERS_CACHE: /root/.cache/huggingface
    volumes:
      - model_cache:/root/.cache/huggingface
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - moderation_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # PgAdmin (Database Management UI) - Optional
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: content_moderation_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@moderation.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - moderation_network
    restart: unless-stopped
    profiles:
      - tools

  # Prometheus (Metrics Collection) - Optional
  prometheus:
    image: prom/prometheus:latest
    container_name: content_moderation_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - moderation_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Visualization) - Optional
  grafana:
    image: grafana/grafana:latest
    container_name: content_moderation_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - moderation_network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  moderation_network:
    driver: bridge
    name: content_moderation_network

volumes:
  postgres_data:
    driver: local
    name: content_moderation_postgres_data
  
  pgadmin_data:
    driver: local
    name: content_moderation_pgadmin_data
  
  model_cache:
    driver: local
    name: content_moderation_model_cache
  
  prometheus_data:
    driver: local
    name: content_moderation_prometheus_data
  
  grafana_data:
    driver: local
    name: content_moderation_grafana_data