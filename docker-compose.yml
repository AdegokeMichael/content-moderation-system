services:
  postgres:
    image: postgres:15-alpine
    container_name: content_moderation_db
    environment:
      POSTGRES_DB: ${DB_NAME:-content_moderation}
      POSTGRES_USER: ${DB_USER:-moderator}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-moderator} -d ${DB_NAME:-content_moderation} -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 20s
    networks:
      - moderation_network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: content_moderation_api
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-content_moderation}
      DB_USER: ${DB_USER:-moderator}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}

      # Optional HF caches (matches image)
      HF_HOME: /app/.cache/huggingface
      HF_HUB_CACHE: /app/.cache/huggingface
      TRANSFORMERS_CACHE: /app/.cache/huggingface

      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${WORKERS:-1}   # only used if you switch image CMD to sh -c form
      PYTHONUNBUFFERED: 1
    volumes:
      - model_cache:/app/.cache/huggingface
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 180s   # generous for first-time model download
    networks:
      - moderation_network
    restart: unless-stopped

networks:
  moderation_network:
    driver: bridge
    name: content_moderation_network   # optional; remove if you don't need a fixed name

volumes:
  postgres_data:
  model_cache:
